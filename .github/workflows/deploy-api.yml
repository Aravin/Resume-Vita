name: Deploy API to AWS CloudPanel

on:
  push:
    branches:
      - main
    paths:
      - 'Code/api/**'
      - '.github/workflows/deploy-api.yml'

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: cloudpanel
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'yarn'
          cache-dependency-path: 'Code/api/yarn.lock'

      - name: Install dependencies
        working-directory: Code/api
        run: yarn install --frozen-lockfile

      - name: Build application
        working-directory: Code/api
        run: yarn build

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          echo "${{ secrets.SSH_KNOWN_HOSTS }}" > ~/.ssh/known_hosts
          chmod 644 ~/.ssh/known_hosts
          
          # Create SSH config
          echo "Host *
            IdentityFile ~/.ssh/deploy_key
            UserKnownHostsFile ~/.ssh/known_hosts
            StrictHostKeyChecking yes" > ~/.ssh/config
          
          # Debug SSH setup
          ls -la ~/.ssh/
          echo "Testing SSH connection..."
          ssh -v -i ~/.ssh/deploy_key ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} "echo 'SSH connection successful'"

      - name: Deploy to CloudPanel
        env:
          DEPLOY_PATH: ${{ secrets.DEPLOY_PATH }}
          SERVER_USER: ${{ secrets.SERVER_USER }}
          SERVER_HOST: ${{ secrets.SERVER_HOST }}
        run: |
          # Create deployment archive
          cd Code/api
          tar -czf deploy.tar.gz dist/ package.json yarn.lock

          # Upload to server
          scp -i ~/.ssh/deploy_key deploy.tar.gz $SERVER_USER@$SERVER_HOST:$DEPLOY_PATH/

          # Execute deployment commands
          ssh -i ~/.ssh/deploy_key $SERVER_USER@$SERVER_HOST "cd $DEPLOY_PATH && \
            # Stop PM2 service
            pm2 stop api.resumevita.com || true && \
            # Create backup directory if it doesn't exist
            mkdir -p ./backups && \
            # Create backup with timestamp
            tar -czf ./backups/backup_\$(date +%Y%m%d_%H%M%S).tar.gz dist/ node_modules/ package.json yarn.lock && \
            # Clean old backups (keep last 5)
            ls -t ./backups/backup_*.tar.gz | tail -n +6 | xargs rm -f 2>/dev/null || true && \
            # Extract new deployment (preserve .env)
            tar -xzf deploy.tar.gz && \
            # Install dependencies
            yarn install --production --frozen-lockfile && \
            # Start PM2 service with the new code
            pm2 delete api.resumevita.com || true && \
            pm2 start dist/index.js --name api.resumevita.com && \
            # Save PM2 process list
            pm2 save && \
            # Cleanup
            rm deploy.tar.gz"
