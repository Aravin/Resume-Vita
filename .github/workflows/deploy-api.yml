name: Deploy API to AWS CloudPanel

on:
  push:
    branches:
      - main
    paths:
      - 'Code/api/**'
      - '.github/workflows/deploy-api.yml'

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: cloudpanel
    env:
      PUPPETEER_SKIP_DOWNLOAD: "true"
      DEPLOY_PATH: "/home/resumevita-api/htdocs/api.resumevita.com"
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'yarn'
          cache-dependency-path: 'Code/api/yarn.lock'

      - name: Install dependencies
        working-directory: Code/api
        run: yarn install --frozen-lockfile

      - name: Build application
        working-directory: Code/api
        run: yarn build

      - name: Install sshpass
        run: sudo apt-get install -y sshpass

      - name: Debug SSH Connection and Permissions
        run: |
          echo "Testing SSH connection and checking permissions..."
          echo "Username: ubuntu"
          echo "Host: $SSH_HOST"
          echo "Deploy path: $DEPLOY_PATH"
          
          # Check current directory and permissions
          sshpass -p "$SSH_PASS" ssh -o StrictHostKeyChecking=no ubuntu@$SSH_HOST "
            echo '=== Current user and groups ==='
            id
            
            echo '=== Parent directory permissions ==='
            sudo ls -la /home/resumevita-api/htdocs/
            
            echo '=== Target directory permissions ==='
            sudo ls -la $DEPLOY_PATH || echo 'Directory does not exist yet'
            
            echo '=== Current processes ==='
            ps aux | grep node
            
            echo '=== PM2 status ==='
            sudo pm2 list || echo 'PM2 not running'
          "
        env:
          SSH_PASS: ${{ secrets.SSH_PASSWORD }}
          SSH_HOST: ${{ secrets.HOST }}

      - name: Prepare and deploy files
        if: success()
        run: |
          cd Code/api
          
          # Create deployment package
          echo "Creating deployment package..."
          zip -r deploy.zip dist package.json yarn.lock
          
          # Create directory and upload zip
          echo "Creating directory and uploading files..."
          sshpass -p "$SSH_PASS" ssh -o StrictHostKeyChecking=no ubuntu@$SSH_HOST "
            echo '=== Creating directory ==='
            sudo mkdir -p $DEPLOY_PATH
            sudo chown -R ubuntu:ubuntu $DEPLOY_PATH
            echo '=== Directory permissions after creation ==='
            sudo ls -la $DEPLOY_PATH/
            
            echo '=== Parent directory permissions ==='
            sudo ls -la /home/resumevita-api/htdocs/
          "
          
          echo "Uploading zip file..."
          sshpass -p "$SSH_PASS" scp deploy.zip ubuntu@$SSH_HOST:$DEPLOY_PATH/
          
          # Extract and setup on server
          echo "Extracting and setting up on server..."
          sshpass -p "$SSH_PASS" ssh -o StrictHostKeyChecking=no ubuntu@$SSH_HOST "
            cd $DEPLOY_PATH
            
            echo '=== Current directory contents before extraction ==='
            sudo ls -la
            
            echo '=== Extracting files ==='
            unzip -o deploy.zip
            
            echo '=== Directory contents after extraction ==='
            sudo ls -la
            
            echo '=== Cleaning up zip ==='
            rm deploy.zip
            
            echo '=== Installing dependencies ==='
            export PUPPETEER_SKIP_DOWNLOAD=true
            yarn install --production --frozen-lockfile
            
            echo '=== Starting service ==='
            sudo pm2 stop api.resumevita.com || true
            sudo pm2 start dist/index.js --name api.resumevita.com
            sudo pm2 save
            
            echo '=== Final PM2 status ==='
            sudo pm2 list
            
            echo '=== Setting final permissions ==='
            sudo chown -R resumevita-api:resumevita-api $DEPLOY_PATH
            sudo chmod -R 755 $DEPLOY_PATH
          "
        env:
          SSH_PASS: ${{ secrets.SSH_PASSWORD }}
          SSH_HOST: ${{ secrets.HOST }}
